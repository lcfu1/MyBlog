<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[MyBlog]]></title>
  <link href="/atom.xml" rel="self"/>
  <link href="/"/>
  <updated>2020-08-03T16:38:44+08:00</updated>
  <id>/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[Git 常用命令]]></title>
    <link href="/15963771367272.html"/>
    <updated>2020-08-02T22:05:36+08:00</updated>
    <id>/15963771367272.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>目录</p>

<ul>
<li>
<a href="#toc_0">仓库</a>
</li>
<li>
<a href="#toc_1">配置</a>
</li>
<li>
<a href="#toc_2">增加/删除文件</a>
</li>
<li>
<a href="#toc_3">代码提交</a>
</li>
<li>
<a href="#toc_4">分支</a>
</li>
<li>
<a href="#toc_5">标签</a>
</li>
<li>
<a href="#toc_6">查看信息</a>
</li>
<li>
<a href="#toc_7">远程同步</a>
</li>
<li>
<a href="#toc_8">撤销</a>
</li>
<li>
<a href="#toc_9">其他</a>
</li>
</ul>


<p>注：以下常用命令来自阮一峰老师的博客文章<a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html">《常用 Git 命令清单》</a></p>
</blockquote>

<h1 id="toc_0">仓库</h1>

<pre><code class="language-git"># 在当前目录新建一个Git代码库
$ git init

# 新建一个目录，将其初始化为Git代码库
$ git init [project-name]

# 下载一个项目和它的整个代码历史
$ git clone [url]
</code></pre>

<h1 id="toc_1">配置</h1>

<pre><code class="language-git"># 显示当前的Git配置
$ git config --list

# 编辑Git配置文件
$ git config -e [--global]

# 设置提交代码时的用户信息
$ git config [--global] user.name &quot;[name]&quot;
$ git config [--global] user.email &quot;[email address]&quot;
</code></pre>

<h1 id="toc_2">增加/删除文件</h1>

<pre><code class="language-git"># 添加指定文件到暂存区
$ git add [file1] [file2] ...

# 添加指定目录到暂存区，包括子目录
$ git add [dir]

# 添加当前目录的所有文件到暂存区
$ git add .

# 添加每个变化前，都会要求确认
# 对于同一个文件的多处变化，可以实现分次提交
$ git add -p

# 删除工作区文件，并且将这次删除放入暂存区
$ git rm [file1] [file2] ...

# 停止追踪指定文件，但该文件会保留在工作区
$ git rm --cached [file]

# 改名文件，并且将这个改名放入暂存区
$ git mv [file-original] [file-renamed]
</code></pre>

<h1 id="toc_3">代码提交</h1>

<pre><code class="language-git"># 提交暂存区到仓库区
$ git commit -m [message]

# 提交暂存区的指定文件到仓库区
$ git commit [file1] [file2] ... -m [message]

# 提交工作区自上次commit之后的变化，直接到仓库区
$ git commit -a

# 提交时显示所有diff信息
$ git commit -v

# 使用一次新的commit，替代上一次提交
# 如果代码没有任何新变化，则用来改写上一次commit的提交信息
$ git commit --amend -m [message]

# 重做上一次commit，并包括指定文件的新变化
$ git commit --amend [file1] [file2] ...
</code></pre>

<h1 id="toc_4">分支</h1>

<pre><code class="language-git"># 列出所有本地分支
$ git branch

# 列出所有远程分支
$ git branch -r

# 列出所有本地分支和远程分支
$ git branch -a

# 新建一个分支，但依然停留在当前分支
$ git branch [branch-name]

# 新建一个分支，并切换到该分支
$ git checkout -b [branch]

# 新建一个分支，指向指定commit
$ git branch [branch] [commit]

# 新建一个分支，与指定的远程分支建立追踪关系
$ git branch --track [branch] [remote-branch]

# 切换到指定分支，并更新工作区
$ git checkout [branch-name]

# 切换到上一个分支
$ git checkout -

# 建立追踪关系，在现有分支与指定的远程分支之间
$ git branch --set-upstream [branch] [remote-branch]

# 合并指定分支到当前分支
$ git merge [branch]

# 选择一个commit，合并进当前分支
$ git cherry-pick [commit]

# 删除分支
$ git branch -d [branch-name]

# 删除远程分支
$ git push origin --delete [branch-name]
$ git branch -dr [remote/branch]
</code></pre>

<h1 id="toc_5">标签</h1>

<pre><code class="language-git"># 列出所有tag
$ git tag

# 新建一个tag在当前commit
$ git tag [tag]

# 新建一个tag在指定commit
$ git tag [tag] [commit]

# 删除本地tag
$ git tag -d [tag]

# 删除远程tag
$ git push origin :refs/tags/[tagName]

# 查看tag信息
$ git show [tag]

# 提交指定tag
$ git push [remote] [tag]

# 提交所有tag
$ git push [remote] --tags

# 新建一个分支，指向某个tag
$ git checkout -b [branch] [tag]
</code></pre>

<h1 id="toc_6">查看信息</h1>

<pre><code class="language-git"># 显示有变更的文件
$ git status

# 显示当前分支的版本历史
$ git log

# 显示commit历史，以及每次commit发生变更的文件
$ git log --stat

# 搜索提交历史，根据关键词
$ git log -S [keyword]

# 显示某个commit之后的所有变动，每个commit占据一行
$ git log [tag] HEAD --pretty=format:%s

# 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件
$ git log [tag] HEAD --grep feature

# 显示某个文件的版本历史，包括文件改名
$ git log --follow [file]
$ git whatchanged [file]

# 显示指定文件相关的每一次diff
$ git log -p [file]

# 显示过去5次提交
$ git log -5 --pretty --oneline

# 显示所有提交过的用户，按提交次数排序
$ git shortlog -sn

# 显示指定文件是什么人在什么时间修改过
$ git blame [file]

# 显示暂存区和工作区的差异
$ git diff

# 显示暂存区和上一个commit的差异
$ git diff --cached [file]

# 显示工作区与当前分支最新commit之间的差异
$ git diff HEAD

# 显示两次提交之间的差异
$ git diff [first-branch]...[second-branch]

# 显示今天你写了多少行代码
$ git diff --shortstat &quot;@{0 day ago}&quot;

# 显示某次提交的元数据和内容变化
$ git show [commit]

# 显示某次提交发生变化的文件
$ git show --name-only [commit]

# 显示某次提交时，某个文件的内容
$ git show [commit]:[filename]

# 显示当前分支的最近几次提交
$ git reflog
</code></pre>

<h1 id="toc_7">远程同步</h1>

<pre><code class="language-git"># 下载远程仓库的所有变动
$ git fetch [remote]

# 显示所有远程仓库
$ git remote -v

# 显示某个远程仓库的信息
$ git remote show [remote]

# 增加一个新的远程仓库，并命名
$ git remote add [shortname] [url]

# 取回远程仓库的变化，并与本地分支合并
$ git pull [remote] [branch]

# 上传本地指定分支到远程仓库
$ git push [remote] [branch]

# 强行推送当前分支到远程仓库，即使有冲突
$ git push [remote] --force

# 推送所有分支到远程仓库
$ git push [remote] --all
</code></pre>

<h1 id="toc_8">撤销</h1>

<pre><code class="language-git"># 恢复暂存区的指定文件到工作区
$ git checkout [file]

# 恢复某个commit的指定文件到暂存区和工作区
$ git checkout [commit] [file]

# 恢复暂存区的所有文件到工作区
$ git checkout .

# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变
$ git reset [file]

# 重置暂存区与工作区，与上一次commit保持一致
$ git reset --hard

# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变
$ git reset [commit]

# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致
$ git reset --hard [commit]

# 重置当前HEAD为指定commit，但保持暂存区和工作区不变
$ git reset --keep [commit]

# 新建一个commit，用来撤销指定commit
# 后者的所有变化都将被前者抵消，并且应用到当前分支
$ git revert [commit]

#暂时将未提交的变化移除，稍后再移入
$ git stash
$ git stash pop
</code></pre>

<h1 id="toc_9">其他</h1>

<pre><code class="language-git"># 生成一个可供发布的压缩包
$ git archive
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[包]]></title>
    <link href="/15963748306853.html"/>
    <updated>2020-08-02T21:27:10+08:00</updated>
    <id>/15963748306853.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>目录</p>

<ul>
<li>
<a href="#toc_0">默认导⼊</a>
</li>
<li>
<a href="#toc_1">自己导⼊</a>
</li>
</ul>


<p>注：参考了kotlin-docs.pdf</p>
</blockquote>

<p>源⽂件通常以包声明开头：</p>

<pre><code class="language-kotlin">package org.example

fun printMessage() { /*……*/ }
class Message { /*……*/ }

// ……
</code></pre>

<p>源⽂件所有内容（⽆论是类还是函数）都包含在声明的包内。所以上例中 printMessage() 的全名是 org.example.printMessage ，⽽ Message 的全名是 org.example.Message 。</p>

<p>如果没有指明包，该⽂件的内容属于⽆名字的默认包。</p>

<h1 id="toc_0">默认导⼊</h1>

<p>有多个包会默认导⼊到每个 Kotlin ⽂件中：</p>

<ul>
<li>kotlin.*</li>
<li>kotlin.annotation.*</li>
<li>kotlin.collections.*</li>
<li>kotlin.comparisons.*（⾃ 1.1 起）</li>
<li>kotlin.io.*</li>
<li>kotlin.ranges.*</li>
<li>kotlin.sequences.*</li>
<li>kotlin.text.*</li>
</ul>

<p>根据⽬标平台还会导⼊额外的包：</p>

<ul>
<li><p>JVM:</p>
<ul>
<li>java.lang.*</li>
<li>kotlin.jvm.*</li>
</ul></li>
<li><p>JS:</p>
<ul>
<li>kotlin.js.*</li>
</ul></li>
</ul>

<h1 id="toc_1">自己导⼊</h1>

<p>除了默认导⼊之外，每个⽂件可以包含它⾃⼰的导⼊指令。</p>

<p>导⼊⼀个单独的名字：</p>

<pre><code class="language-kotlin">import org.example.Message // 现在 Message 可以不⽤限定符访问
</code></pre>

<p>导⼊⼀个作⽤域下的所有内容（包、类、对象等）:</p>

<pre><code class="language-kotlin">import org.example.* // “org.example”中的⼀切都可访问
</code></pre>

<p>如果出现名字冲突，可以使⽤ as 关键字在本地重命名冲突项来消歧义：</p>

<pre><code class="language-kotlin">import org.example.Message // Message 可访问
import org.test.Message as testMessage // testMessage 代表“org.test.Message”
</code></pre>

<p>关键字 import 并不仅限于导⼊类，也可⽤它来导⼊其他声明：</p>

<ul>
<li>顶层函数及属性； </li>
<li>在对象声明中声明的函数和属性; </li>
<li>枚举常量。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基本类型]]></title>
    <link href="/15963501057358.html"/>
    <updated>2020-08-02T14:35:05+08:00</updated>
    <id>/15963501057358.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>目录</p>

<ul>
<li>
<a href="#toc_0">数字</a>
<ul>
<li>
<a href="#toc_1">整数</a>
</li>
<li>
<a href="#toc_2">浮点数</a>
</li>
<li>
<a href="#toc_3">字⾯常量</a>
</li>
<li>
<a href="#toc_4">数字字⾯值中的下划线</a>
</li>
<li>
<a href="#toc_5">表⽰⽅式</a>
</li>
<li>
<a href="#toc_6">显式转换</a>
</li>
<li>
<a href="#toc_7">运算</a>
<ul>
<li>
<a href="#toc_8">整数除法</a>
</li>
<li>
<a href="#toc_9">位运算</a>
</li>
</ul>
</li>
</ul>
</li>
<li>
<a href="#toc_10">字符</a>
</li>
<li>
<a href="#toc_11">布尔</a>
</li>
<li>
<a href="#toc_12">数组</a>
<ul>
<li>
<a href="#toc_13">原⽣类型数组</a>
</li>
</ul>
</li>
<li>
<a href="#toc_14">⽆符号整型</a>
<ul>
<li>
<a href="#toc_15">特化的类</a>
</li>
<li>
<a href="#toc_16">字⾯值</a>
</li>
</ul>
</li>
<li>
<a href="#toc_17">字符串</a>
<ul>
<li>
<a href="#toc_18">字符串字⾯值</a>
</li>
<li>
<a href="#toc_19">字符串模板</a>
</li>
</ul>
</li>
</ul>


<p>注：参考了kotlin-docs.pdf</p>
</blockquote>

<p>在 Kotlin 中，所有东西都是对象，在这个意义上讲我们可以在任何变量上调⽤成员函数与属性。</p>

<h1 id="toc_0">数字</h1>

<p>Kotlin 提供了⼀组表⽰数字的内置类型。</p>

<h2 id="toc_1">整数</h2>

<p>对于整数，有四种不同⼤⼩的类型，分别是Byte、Short、Int、Long。</p>

<p>类型推断时，未超出 Int 最⼤值的整型值初始化的变量都会推断为 Int 类型。如果初始值超过了其最⼤值，那么推断为 Long 类型。</p>

<p>在值后追加 L 后缀可以显式指定 Long 型值。</p>

<pre><code class="language-kotlin">val one = 1 // Int 
val threeBillion = 3000000000 // Long 
val oneLong = 1L // Long 
val oneByte: Byte = 1
</code></pre>

<h2 id="toc_2">浮点数</h2>

<p>对于浮点数，Kotlin 提供了 Float 与 Double 类型。</p>

<p>对于以⼩数初始化的变量，编译器会推断为 Double 类型。</p>

<p>如需将⼀个值显式指定为 Float 类型，请添加 f 或 F 后缀。如果这样的值包含多于 6〜7 位⼗进制数，那么会将其舍⼊。</p>

<pre><code class="language-kotlin">val pi = 3.14 // Double 
val e = 2.7182818284 // Double 
val eFloat = 2.7182818284f // Float，实际值为 2.7182817
</code></pre>

<h2 id="toc_3">字⾯常量</h2>

<p>不⽀持⼋进制。</p>

<p>⼗进制：123 <br/>
⼗六进制：0x0F<br/>
⼆进制：0b00001011<br/>
Long类型⽤⼤写L标记：123L <br/>
默认double：123.5 、123.5e10<br/>
Float类型⽤f或者F标记：123.5f</p>

<h2 id="toc_4">数字字⾯值中的下划线</h2>

<p>使⽤下划线使数字常量更易读。</p>

<pre><code class="language-kotlin">val oneMillion = 1_000_000
val creditCardNumber = 1234_5678_9012_3456L
val socialSecurityNumber = 999_99_9999L
val hexBytes = 0xFF_EC_DE_5E
val bytes = 0b11010010_01101001_10010100_10010010
</code></pre>

<h2 id="toc_5">表⽰⽅式</h2>

<p>在 Java 平台数字是物理存储为 JVM 的原⽣类型。</p>

<p>⼀个可空的引⽤（如 Int? ）或泛型会把数字装箱。数字装箱不⼀定保留同⼀性。</p>

<pre><code class="language-kotlin">val a: Int = 100 
val boxedA: Int? = a 
val anotherBoxedA: Int? = a

val b: Int = 10000 
val boxedB: Int? = b 
val anotherBoxedB: Int? = b

println(boxedA === anotherBoxedA) // true println(boxedB === anotherBoxedB) // false
</code></pre>

<p>但保留相等性。</p>

<pre><code class="language-kotlin">val a: Int = 10000 
println(a == a) // 输出“true” 
val boxedA: Int? = a 
val anotherBoxedA: Int? = a 
println(boxedA == anotherBoxedA) // 输出“true”
</code></pre>

<h2 id="toc_6">显式转换</h2>

<p>较⼩的类型不能隐式转换为较⼤的类型。</p>

<pre><code class="language-kotlin">val b: Byte = 1 // OK, 字⾯值是静态检测的 
val i: Int = b // 错误
</code></pre>

<p>可以显式转换来拓宽数字。</p>

<pre><code class="language-kotlin">val i: Int = b.toInt() // 正确：显式拓宽
</code></pre>

<p>数字类型⽀持如下转换。<br/>
toByte(): Byte<br/>
toShort(): Short<br/>
toInt(): Int<br/>
toLong(): Long<br/>
toFloat(): Float<br/>
toDouble(): Double<br/>
toChar(): Char</p>

<p>算术运算会有重载做适当转换。</p>

<pre><code class="language-kotlin">val l = 1L + 3 // Long + Int =&gt; Long
</code></pre>

<h2 id="toc_7">运算</h2>

<p>Kotlin⽀持数字运算的标准集（ + - * / % ）。</p>

<h3 id="toc_8">整数除法</h3>

<p>整数间的除法总是返回整数。会丢弃任何⼩数部分。</p>

<pre><code class="language-kotlin">val x = 5 / 2 
//println(x == 2.5) // ERROR: Operator &#39;==&#39; cannot be applied to &#39;Int&#39; and &#39;Double&#39; 
println(x == 2)
</code></pre>

<p>如需返回浮点类型，请将其中的⼀个参数显式转换为浮点类型。</p>

<pre><code class="language-kotlin">val x = 5 / 2.toDouble() 
println(x == 2.5)
</code></pre>

<h3 id="toc_9">位运算</h3>

<p>使⽤中缀⽅式调⽤具名函数。</p>

<pre><code class="language-kotlin">val x = 1 shl 2
</code></pre>

<p>完整的位运算列表（只⽤于 Int 与 Long ）：<br/>
shl(bits)：有符号左移<br/>
shr(bits)：有符号右移<br/>
ushr(bits)：⽆符号右移<br/>
and(bits)：位与<br/>
or(bits)：位或<br/>
xor(bits)：位异或<br/>
inv()：位⾮</p>

<h1 id="toc_10">字符</h1>

<p>字符⽤ Char 类型表⽰。它们不能直接当作数字。</p>

<p>字符字⾯值⽤单引号括起来: &#39;1&#39; 。</p>

<p>特殊字符可以⽤反斜杠转义。⽀持这⼏个转义序列：\t 、 \b 、\n 、\r 、\&#39; 、&quot; 、\ 与 $ 。</p>

<p>编码其他字符要⽤ Unicode 转义序列语法：&#39;\uFF00&#39; 。</p>

<p>可空引⽤字符也会被装箱。</p>

<h1 id="toc_11">布尔</h1>

<p>布尔⽤ Boolean 类型表⽰，它有两个值：true 与 false。</p>

<p>内置的布尔运算有：<br/>
|| ：短路逻辑或<br/>
&amp;&amp; ：短路逻辑与<br/>
! ：逻辑⾮</p>

<p>可空引⽤布尔也会被装箱。</p>

<h1 id="toc_12">数组</h1>

<p>数组在 Kotlin 中使⽤ Array 类来表⽰，它定义了 get 与 set 函数（按照运算符重载约定这会转变为 [] ）以及 size 属性，以及⼀些其他有⽤的成员函数。</p>

<p>可以使⽤库函数 arrayOf() 来创建⼀个数组并传递元素值给它，这样 arrayOf(1, 2, 3) 创建了 array [1, 2, 3] 。或者，库函数 arrayOfNulls() 可以⽤于创建⼀个指定⼤⼩的、所有元素都为空的数组。</p>

<p>⽤接受数组⼤⼩以及⼀个函数参数的 Array 构造函数，⽤作参数的函数能够返回给定索引的每个元素初始值：</p>

<pre><code class="language-kotlin">// 创建⼀个 Array&lt;String&gt; 初始化为 [&quot;0&quot;, &quot;1&quot;, &quot;4&quot;, &quot;9&quot;, &quot;16&quot;]

val asc = Array(5) { i -&gt; (i * i).toString() } asc.forEach { println(it) }
</code></pre>

<p>Kotlin 中数组是不型变的（invariant）。这意味着 Kotlin 不让我们把 Array<String> 赋值给 Array<Any> ，以防 ⽌可能的运⾏时失败。</p>

<h2 id="toc_13">原⽣类型数组</h2>

<p>Kotlin 也有⽆装箱开销的专⻔的类来表⽰原⽣类型数组: ByteArray 、ShortArray 、IntArray 等等。这些类与 Array 并没有继承关系，但是它们有同样的⽅法属性集。它们也都有相应的⼯⼚⽅法:</p>

<pre><code class="language-kotlin">// ⼤⼩为 5、值为 [0, 0, 0, 0, 0] 的整型数组 val arr = IntArray(5)

// 例如：⽤常量初始化数组中的值
// ⼤⼩为 5、值为 [42, 42, 42, 42, 42] 的整型数组
val arr = IntArray(5) { 42 }

// 例如：使⽤ lambda 表达式初始化数组中的值
// ⼤⼩为 5、值为 [0, 1, 2, 3, 4] 的整型数组（值初始化为其索引值）
var arr = IntArray(5) { it * 1 }
</code></pre>

<h1 id="toc_14">⽆符号整型</h1>

<p>Kotlin为⽆符号整数引⼊了以下类型：<br/>
kotlin.UByte : ⽆符号 8 ⽐特整数，范围是 0 到 255。kotlin.UShort : ⽆符号 16 ⽐特整数，范围是 0 到 65535。kotlin.UInt : ⽆符号 32 ⽐特整数，范围是 0 到 2<sup>32</sup> - 1。kotlin.ULong : ⽆符号 64 ⽐特整数，范围是 0 到 2<sup>64</sup> - 1。</p>

<p>⽆符号类型⽀持其对应有符号类型的⼤多数操作。</p>

<h2 id="toc_15">特化的类</h2>

<p>与原⽣类型相同，每个⽆符号类型都有相应的为该类型特化的表⽰数组的类型：<br/>
kotlin.UByteArray : ⽆符号字节数组。<br/>
kotlin.UShortArray : ⽆符号短整型数组。<br/>
kotlin.UIntArray : ⽆符号整型数组。<br/>
kotlin.ULongArray : ⽆符号⻓整型数组。</p>

<p>与有符号整型数组⼀样，它们提供了类似于 Array 类的 API ⽽没有装箱开销。</p>

<h2 id="toc_16">字⾯值</h2>

<p>为使⽆符号整型更易于使⽤，Kotlin 提供了⽤后缀标记整型字⾯值来表⽰指定⽆符号类型（类似于 Float/Long）。</p>

<p>后缀 u 与 U 将字⾯值标记为⽆符号。确切类型会根据预期类型确定。如果没有提供预期的类型，会根据字⾯值⼤ ⼩选择 UInt 或者 ULong。</p>

<pre><code class="language-kotlin">val b: UByte = 1u // UByte，已提供预期类型
val s: UShort = 1u // UShort，已提供预期类型
val l: ULong = 1u // ULong，已提供预期类型

val a1 = 42u // UInt：未提供预期类型，常量适于 UInt
val a2 = 0xFFFF_FFFF_FFFFu // ULong：未提供预期类型，常量不适于 UInt
</code></pre>

<p>后缀 uL 与 UL 显式将字⾯值标记为⽆符号⻓整型。</p>

<pre><code class="language-kotlin">val a = 1UL // ULong，即使未提供预期类型并且常量适于 UInt
</code></pre>

<h1 id="toc_17">字符串</h1>

<p>字符串⽤ String 类型表⽰。字符串是不可变的。字符串的字符元素可以使⽤索引运算符访问: s[i] 。可以⽤ for 循环迭代字符串:</p>

<pre><code class="language-kotlin">for (c in str) { 
    println(c) 
}
</code></pre>

<h2 id="toc_18">字符串字⾯值</h2>

<p>Kotlin 有两种类型的字符串字⾯值: 转义字符串可以有转义字符，以及原始字符串可以包含换⾏以及任意⽂本。</p>

<pre><code class="language-kotlin">//转义字符串
val s = &quot;Hello, world!\n&quot;
</code></pre>

<p>原始字符串使⽤三个引号（ &quot;&quot;&quot; ）分界符括起来，内部没有转义并且可以包含换⾏以及任何其他字符:</p>

<pre><code class="language-kotlin">val text = &quot;&quot;&quot;
        |Tell me and I forget. 
        |Teach me and I remember. 
        |Involve me and I learn. 
        |(Benjamin Franklin) 
        &quot;&quot;&quot;.trimMargin()
</code></pre>

<p>通过 trimMargin() 函数去除前导空格，默认 | ⽤作边界前缀，但你可以选择其他字符并作为参数传⼊，⽐如 trimMargin(&quot;&gt;&quot;) 。</p>

<p>trimIndent()函数去除行首的所有空格。</p>

<h2 id="toc_19">字符串模板</h2>

<p>模板表达式以美元符（ $ ） 头，由⼀个简单的名字构成。</p>

<p>或者⽤花括号括起来的任意表达式。</p>

<pre><code class="language-kotlin">val s = &quot;abc&quot;
println(&quot;$s.length is ${s.length}&quot;)
</code></pre>

<p>原始字符串与转义字符串内部都⽀持模板。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kotlin学习]]></title>
    <link href="/15963637899751.html"/>
    <updated>2020-08-02T18:23:09+08:00</updated>
    <id>/15963637899751.html</id>
    <content type="html"><![CDATA[
<h1 id="toc_0">Kotlin开发Android的优点</h1>

<p>1、富有表现力且简洁。<br/>
2、更安全的代码。<br/>
3、可互操作。<br/>
4、结构化并发。</p>

<h1 id="toc_1">学习资源</h1>

<p>Kotlin 语言中文站：<a href="https://www.kotlincn.net">https://www.kotlincn.net</a></p>

<p>完整 Kotlin 参考（PDF）：<a href="https://www.kotlincn.net/docs/kotlin-docs.pdf">https://www.kotlincn.net/docs/kotlin-docs.pdf</a></p>

]]></content>
  </entry>
  
</feed>
